{"ast":null,"code":"import { of, throwError } from 'rxjs';\nimport { delay, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\n/**\n * This service acts as a mock back-end.\n * It has some intentional errors that you might have to fix.\n */\nfunction randomDelay() {\n  return Math.random() * 4000;\n}\nexport let BackendService = /*#__PURE__*/(() => {\n  class BackendService {\n    constructor() {\n      this.storedTickets = [{\n        id: 0,\n        completed: false,\n        assigneeId: 111,\n        description: 'Install a monitor arm'\n      }, {\n        id: 1,\n        completed: false,\n        assigneeId: 111,\n        description: 'Move the desk to the new location'\n      }];\n      this.storedUsers = [{\n        id: 111,\n        name: 'Victor'\n      }];\n      this.lastId = 1;\n      this.findUserById = id => this.storedUsers.find(user => user.id === +id);\n      this.findTicketById = id => this.storedTickets.find(ticket => ticket.id === +id);\n    }\n    tickets() {\n      return of(this.storedTickets).pipe(delay(randomDelay()));\n    }\n    ticket(id) {\n      return of(this.findTicketById(id)).pipe(delay(randomDelay()));\n    }\n    users() {\n      return of(this.storedUsers).pipe(delay(randomDelay()));\n    }\n    user(id) {\n      return of(this.findUserById(id)).pipe(delay(randomDelay()));\n    }\n    newTicket(payload) {\n      const newTicket = {\n        id: ++this.lastId,\n        completed: false,\n        assigneeId: null,\n        description: payload.description\n      };\n      return of(newTicket).pipe(delay(randomDelay()), tap(ticket => this.storedTickets.push(ticket)));\n    }\n    assign(ticketId, userId) {\n      const user = this.findUserById(+userId);\n      const foundTicket = this.findTicketById(+ticketId);\n      if (foundTicket && user) {\n        return of(foundTicket).pipe(delay(randomDelay()), tap(ticket => {\n          ticket.assigneeId = +userId;\n        }));\n      }\n      return throwError(new Error('ticket or user not found'));\n    }\n    complete(ticketId, completed) {\n      const foundTicket = this.findTicketById(+ticketId);\n      if (foundTicket) {\n        return of(foundTicket).pipe(delay(randomDelay()), tap(ticket => {\n          ticket.completed = true;\n        }));\n      }\n      return throwError(new Error('ticket not found'));\n    }\n  }\n  BackendService.ɵfac = function BackendService_Factory(t) {\n    return new (t || BackendService)();\n  };\n  BackendService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BackendService,\n    factory: BackendService.ɵfac\n  });\n  return BackendService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}